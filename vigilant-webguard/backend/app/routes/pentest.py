from fastapi import APIRouter, HTTPException
from fastapi.responses import JSONResponse, FileResponse
from app.services.pentesting_service import pentesting_service
from app.utils.advanced_pdf_generator import advanced_pdf_generator
import os
from loguru import logger

router = APIRouter()

@router.post("/execute")
async def execute_pentest(request_data: dict):
    """Ejecutar pentesting completo sobre un URL objetivo"""
    try:
        url = request_data.get('url')
        if not url:
            raise HTTPException(status_code=400, detail="URL requerida")

        # Ejecutar pentesting completo
        report = await pentesting_service.comprehensive_pentest(url)
        
        return JSONResponse(content=report)
    except Exception as e:
        logger.error(f"Error ejecutando pentesting: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/report")
async def get_latest_report():
    """Obtener el último reporte de pentesting"""
    try:
        report = pentesting_service.get_latest_report()
        if 'error' in report:
            raise HTTPException(status_code=404, detail=report['error'])
        return JSONResponse(content=report)
    except Exception as e:
        logger.error(f"Error obteniendo reporte: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/download-pdf")
async def download_latest_report_pdf():
    """Descargar el último reporte en formato PDF"""
    try:
        report = pentesting_service.get_latest_report()
        if 'error' in report:
            raise HTTPException(status_code=404, detail=report['error'])

        pdf_path = convert_report_to_pdf(report)
        return FileResponse(pdf_path, media_type="application/pdf", filename="pentest_report.pdf")
    except Exception as e:
        logger.error(f"Error descargando PDF: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# Función auxiliar para generar PDF

def convert_report_to_pdf(report: dict) -> str:
    """Convertir reporte JSON a PDF usando el generador avanzado"""
    try:
        pdf_path = advanced_pdf_generator.generate_pentest_pdf(report)
        return pdf_path
    except Exception as e:
        logger.error(f"Error generando PDF: {e}")
        raise HTTPException(status_code=500, detail=f"Error generando PDF: {str(e)}")

